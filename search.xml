<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常见文件管理命令大全</title>
      <link href="/archives/34095c49.html"/>
      <url>/archives/34095c49.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常见文件管理命令"><a href="#Linux常见文件管理命令" class="headerlink" title="Linux常见文件管理命令"></a>Linux常见文件管理命令</h1><p>常见命令介绍</p><blockquote><p>1.Ctrl c  :取消命令并换行</p><p>2.Ctrl u :清空本行命令</p><p>3.ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><p>​         ls -a：查看所有文件包括隐藏文件（以.开头的文件就是隐藏文件）</p><p>​ㅤ●ㅤls -l：查看当前路径下文件的读、写、执行权限</p><p>ㅤㅤㅤ●ㅤls | wc -l：查看ls下有多少个文件</p><p>4.pwd：显示当前路径</p><p>5.cd XXX: 进入XXX目录下, cd .. 返回上层目录</p><ol start="6"><li><p>cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如..&#x2F;dir_c&#x2F;a.txt，表示上层目录下的dir_c文件夹下的文件a.txt</p></li><li><p>cp XXX YYY -r : 将XXX目录（文件夹）复制到YYY下</p></li><li><p>. rm XXX：删除普通文件； rm XXX -r：删除文件夹</p><p>ㅤㅤㅤ●ㅤ支持正则表达式，删除所有.txt类型文件：rm *.txt</p><p>ㅤㅤㅤ●ㅤ删除所有文件（不包括文件夹）：rm *</p><p>ㅤㅤㅤ●ㅤ正则表达式删除所有文件夹：rm * -r即可</p><p>9.mv XXX YYY：将XXX文件移动到YYY下，和cp命令一样，XXX和YYY可以是同一个路径；重命名也是用这个命令</p><p>ㅤㅤㅤ●ㅤ非当前路径移动方法：mv a.txt ..&#x2F;b.txt</p><p>ㅤㅤ10. touch XXX：创建一个文件</p><p>ㅤㅤ11. cat XXX：展示文件XXX中的内容</p><p>ㅤㅤ12. 复制文本：windows&#x2F;Linux下：Ctrl + insert，Mac下：command + c</p><p>ㅤㅤ13. 粘贴文本：windows&#x2F;Linux下：Shift + insert，Mac下：command + v</p><p>ㅤㅤ14. history：查看历史输入指令</p><p>ㅤㅤ15. tree：以树形显示文件目录结构</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces round#819</title>
      <link href="/archives/bed3a285.html"/>
      <url>/archives/bed3a285.html</url>
      
        <content type="html"><![CDATA[<h1 id="codeforces-round-819"><a href="#codeforces-round-819" class="headerlink" title="codeforces round 819"></a>codeforces round 819</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>题目链接：<a href="https://codeforces.com/contest/1726/problem/A">Mainak and Array</a></p><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>给定一个长度为n数组，你仅有一次机会旋转一个子区间，最大化a[n] - a[1]。</p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>可以分类讨论一下：</p><p>1.对于位置 i  可以将它自己旋转到n的位置，那么 i+1就作为 1的位置</p><p>2.固定a[1]不变，旋转使得a[n]最大</p><p>3.固定a[n]不变，旋转使得a[1]最小</p><p>思路很简单。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10100</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(a[n] - a[<span class="number">1</span>],ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)<span class="comment">//枚举每个数作为a[n]</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,a[i] - a[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++) <span class="comment">//枚举除1位置上的数作为a[n]</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,a[i] - a[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,a[n] - a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p><a href="https://codeforces.com/contest/1726/problem/B">Mainak and Interesting Sequence</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长度为n，所有数的和为m的数组，回答是否能够构造出一个有趣的数组。对于数组p, p[i] 的值 为 a数组中所有严格小于a[i]的数的异或和。一个有趣的数组应满足所有的p[i] &#x3D; 0。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>考察异或的性质：如果两个相同的数异或，值为0</p><p>那我们可以构造一个数组，当n是偶数时，若m为偶数，那么可以 构造一个包含 n - 2个1 和 2个 m - (n-2) &#x2F; 2。若m为奇数则无解，因为我们构造不出来使得 m - n + 2为偶数。当n为奇数时，可以构造一个包含 n - 1个1，和 一个 m - n + 1.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">    if(n == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;m&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n &gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n % 2 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        if(m % 2 == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        for(int i = 1;i &lt;= n - 2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;1&lt;&lt;&quot; &quot;;</span><br><span class="line">            m -= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;m / 2&lt;&lt;&quot; &quot;&lt;&lt;m / 2&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">        &#125;</span><br><span class="line">        else </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        for(int i = 1;i &lt;= n - 1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;1&lt;&lt;&quot; &quot;;</span><br><span class="line">            m -= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;m&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>链接： <a href="https://codeforces.com/contest/1726/problem/C">Jatayu’s Balanced Bracket Sequence</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定n对括号，是一个长度为2n的合法括号序列。一个区间[l, r]如果是一个合法序列，那么l和r之间会有一条边，求该图的连通块数量。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>思维题，主要是分析好对于什么情况会产生两个连通块：连续两个(才会增加一个联通块，因为这两个(各自匹配的括号不可能联通，所以只需要统计两个 ( 相连 的情况。但是要注意的是1和n肯定会产生一个连通块，所以ans一开始要设为1</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char s[1010000];</span><br><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d%s&quot;,&amp;n,s+1);</span><br><span class="line">    int ans = 1;</span><br><span class="line">    for(int i = 2;i &lt;= n * 2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i] == &#x27;(&#x27; &amp;&amp; s[i-1] == &#x27;(&#x27;) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,ans);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>题目链接：<a href="https://codeforces.com/contest/1726/problem/D">Edge Split</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一个无向图，其中边的数量小于等于n + 2，给所有的m条边染色，使得对于每种颜色的边连通块数量之和最小。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>如果没有环的话,那么每条边都会使连通分量数减少,所以我们的目标是不让构造的图里出现环。而且m的数据范围是&lt;&#x3D;n + 2的，所以可以想到构造一棵生成树染成一种颜色，然后最多还有三条边。如果这三条边没有成环直接输出，如果这三条边出现了环，那么</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 2e5+10;</span><br><span class="line">int ans[N],b[N],f[N],dep[N];</span><br><span class="line">int fa[N];</span><br><span class="line">int u[N],v[N];</span><br><span class="line">vector&lt;int&gt; e[N];</span><br><span class="line">void init(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 1;i &lt;= n;i++) f[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x != f[x]) f[x] = find(f[x]);</span><br><span class="line">    return f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dfs(int u)</span><br><span class="line">&#123;</span><br><span class="line">    for(auto s : e[u])</span><br><span class="line">    &#123;</span><br><span class="line">        if(s == fa[u]) continue;</span><br><span class="line">        fa[s] = u;</span><br><span class="line">        dep[s] = dep[u] + 1;</span><br><span class="line">        dfs(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    iota(f+1,f+1+n,1);</span><br><span class="line">    for(int i = 1;i &lt;= n + 2;i++) ans[i] = fa[i] = b[i] = 0,dep[i] = 0,e[i].clear();</span><br><span class="line">    //  memset(f,0,sizeof f);</span><br><span class="line">    //memset(dep,0,sizeof dep);</span><br><span class="line">    int id = 0;</span><br><span class="line">    for(int i = 1;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;u[i]&gt;&gt;v[i];</span><br><span class="line">        if(find(u[i]) != find(v[i])) </span><br><span class="line">        &#123;</span><br><span class="line">            f[find(u[i])] = find(v[i]);</span><br><span class="line">            ans[i] = 1;</span><br><span class="line">            e[u[i]].push_back(v[i]);</span><br><span class="line">            e[v[i]].push_back(u[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(m == n + 2)//有可能成环</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i = 1;i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(ans[i]) continue;</span><br><span class="line">            id = i;</span><br><span class="line">            b[u[i]] = b[v[i]] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int cnt = 0;</span><br><span class="line">        for(int i = 1;i &lt;= n;i++) if(b[i]) cnt++;//判断是否成环</span><br><span class="line">        if(cnt == 3)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(1);</span><br><span class="line">            if(dep[u[id]] &lt; dep[v[id]]) swap(u[id],v[id]);</span><br><span class="line">            for(int i = 1;i &lt;= m;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(u[i] == u[id] &amp;&amp; v[i] == fa[u[id]])  swap(ans[id],ans[i]);</span><br><span class="line">                else if(v[i] == u[id] &amp;&amp; u[i] == fa[u[id]]) swap(ans[id],ans[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 1;i &lt;= m;i++) cout&lt;&lt;ans[i]; </span><br><span class="line">    cout&lt;&lt;&#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(0);</span><br><span class="line">cin.tie(0);cout.tie(0);</span><br><span class="line">    int t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing 100 题解</title>
      <link href="/archives/3b534ab8.html"/>
      <url>/archives/3b534ab8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Acwing100-题解"><a href="#Acwing100-题解" class="headerlink" title="Acwing100 题解"></a>Acwing100 题解</h1><p>原题链接： <a href="https://www.acwing.com/problem/content/102/">https://www.acwing.com/problem/content/102/</a></p><p><strong>1.<strong>首先我们先要知道的是用差分的思想，每次对差分数组的两个点做加或减的操作，最后使得b[2]到b[n]都为0,。<br>疑点一：为什么是从2到n而不是从1到n：<br>我们可以回想一下差分数组是怎么来的，是原始数组a[i]减去a[i-1];那么b[1]呢，b[1]是不是就等于a[1],(a[0]&#x3D;0)<br>所以如果这个数列的值都是一样的，</strong>最后我们的差分数组一定是b[1] &#x3D; 一个常数，b[2]-b[n] 都等于0</strong>（这个点在求数列种数的时候也会用到）</p><hr><p><strong>2</strong>.如何保证操作次数最小：<br>一个数列可能有负数也可能有正数，利用贪心的思想 差分数组数组的操作b[l] +&#x3D; 1,b[r+1] -&#x3D; 1的特性可以使正负两个数相消，所以最后差分就只剩同符号的数，此时操作数为min(pos,neg)&#x2F;&#x2F;pos为差分数组中正数和，neg为负数和。剩下的同符号的数只能通过b[1]或者b[n+1]两个对差分数组没有影响的来一个一个的把自己减为0，<br>所以操作次数为个数的总和，abs(pos-neg);</p><hr><p>3.种类数量为什么是abs(pos-neg)+1<br>根据疑点一最后得出来的性质我们可以想到数列的值就是b[1]的值，因为根据逆推，原数组(也就是我们的数列)是差分数组的前缀和，根据前缀和的公式，s[i] &#x3D; s[i-1] + b[i];由于b[2]-b[n]都为0，故s[i] &#x3D; s[i-1] &#x3D; b[1]；所以我们对b[1]的操作次数也就是种类数量，由于贪心的去操作，我们一开始是对负数和正数两个点进行操作，所以b[1]没有变，之后数组就只剩下同符号的数，此时我们有两种方案，假设此时数组只剩下正数，方案一1.b[1] +&#x3D; 1,b[i+1] -&#x3D;1<br>方案2.b[i] -&#x3D; (-1),b[n+1] +&#x3D; (-1);<br>因为最后的效果相同均是将2-n的数减为0，故两种方案均可，举例两个边界情况，如果只采取方案二，b[1]不变，如果只采取方案一，即需要操作abs(pos-neg)次，b[1] +&#x3D; abs(pos-neg);我们可以假设一开始b[1]为2，abs(pos-neg)为3，b[1]的取值可能为2,3,4,5，即abs(pos-neg)+1  </p><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N  = 1e5+10;</span><br><span class="line">int b[N],a[N];</span><br><span class="line">long long pos,neg;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i = 1;i &lt;= n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        b[i] = a[i] - a[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 2;i &lt;= n;i++)&#123;</span><br><span class="line">        if(b[i] &gt; 0) pos += b[i];</span><br><span class="line">        else  neg -=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;min(pos,neg)+abs(pos-neg)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;abs(pos-neg) + 1;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 差分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形动态规划(一)</title>
      <link href="/archives/a0ab2bd9.html"/>
      <url>/archives/a0ab2bd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="树形动态规划入门（一）树上背包"><a href="#树形动态规划入门（一）树上背包" class="headerlink" title="树形动态规划入门（一）树上背包"></a>树形动态规划入门（一）树上背包</h1><h2 id="例题（1）"><a href="#例题（1）" class="headerlink" title="例题（1）"></a>例题（1）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你一个 n(1≤n≤2000)n(1≤n≤2000) 个点的有根树，其中1号点为根。每个点有一个权值ai(−105≤ai≤105)，权值可能是负数。</p><p>你需要回答 q(1≤q≤105) 个询问，在 u 的子树中，选择一个大小恰好为 m(1≤m≤n) 的包含 u 点的连通块，最大的权值和。保证 m 不会超过 u 的子树大小。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以用f[i][j]表示前i个节点选了j个节点的权值和，那么对于当前节点我们可以考虑将它的某些子节点合并成一个连通块，</p><p>由于n的数据范围只有2000，我们可以考虑枚举，将问题分为两类，一类是sz[u]，表示dfs过的子树里，一类是sz[v]，表示目前要考虑合并的子节点，那么合并的个数就是sz[u]的子集和sz[v]的子集。</p><p>我们这里指的合并并不是要真的合并，而是用一个tmp数组，下标表示已合并的个数，存储权值的最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2100</span>, M = N, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> w[N], f[N][N], sz[N];</span><br><span class="line"><span class="type">int</span> tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    sz[u] = <span class="number">0</span>;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt;= sz[u] + sz[j]; v ++ ) tmp[v] = -INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= sz[u]; k ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt;= sz[j]; v ++ )</span><br><span class="line">                tmp[k + v] = <span class="built_in">max</span>(tmp[k + v], f[u][k] + f[j][v]);</span><br><span class="line">        sz[u] += sz[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt;= sz[u]; v ++ ) f[u][v] = tmp[v];</span><br><span class="line">        <span class="comment">//if (u == 2) cout &lt;&lt; f[u][2] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sz[u] += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//if (u == 4) cout &lt;&lt; sz[u] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = sz[u]; i &gt;= <span class="number">1</span>; i -- ) f[u][i] = f[u][i - <span class="number">1</span>] + w[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">add</span>(x, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; f[1][2] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="comment">//cout &lt;&lt;x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题-（2）树上背包（二）"><a href="#例题-（2）树上背包（二）" class="headerlink" title="例题 （2）树上背包（二）"></a>例题 （2）树上背包（二）</h2><blockquote><p>给你一个n(1≤n≤50000) 个点的有根树，其中1号点为根。每个点有一个权值ai(−105≤ai≤105)，权值可能是负数。</p><p>你需要回答 q(1≤q≤105) 个询问，在 u的子树中，选择一个大小恰好为 m(1≤m≤100) 的包含 u 点的连通块，最大的权值和。保证 m 不会超过 u 的子树大小。</p></blockquote><p>这题与例题一的不同是n的范围变大了，但是因为给了m的范围，所以第二维的范围只要求[1,100]的最大值即可，时间复杂度为O（nm）。所以只需要注意在循环（1，sz[u])的时候，取min（m,sz[u]）即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="树上背包（三）"><a href="#树上背包（三）" class="headerlink" title="树上背包（三）"></a>树上背包（三）</h2><blockquote><p>给你一个 n(1≤n≤1000) 个点的有根树，其中1号点为根。每个点有一个权值 ai(1≤ai≤105) 和重量 wi(1≤wi≤104)。</p><p>你需要选择一个重量恰好 k 的包含根的连通块，最大的权值和。对所有的k&#x3D;0,1,2,…,m输出答案，其中 1≤m≤104 。如果不存在，输出<code>0</code>。</p></blockquote><p>前两个题并没有很明显的体现出背包思想，那么这个题 对于每个点，都可以在每个子树里选择合并任意节点，但是要在不超过m个节点的限制，这样是不是很像背包问题，对的我们将背包的思想代入，体积相当于节点个数，价值相当于权值</p>]]></content>
      
      
      <categories>
          
          <category> 树形动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树上问题 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 树形DP </tag>
            
            <tag> 树上背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存分配介绍</title>
      <link href="/archives/9a7c0487.html"/>
      <url>/archives/9a7c0487.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java内存分配介绍"><a href="#Java内存分配介绍" class="headerlink" title="Java内存分配介绍"></a>Java内存分配介绍</h1><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>方法运行时所进入的内存，变量也是在这里</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>new出来的东西会在这块内存中开辟空间并产生地址</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>字节码文件加载时进入的内存</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021CCPC广州 C.necklace</title>
      <link href="/archives/12536c1f.html"/>
      <url>/archives/12536c1f.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-necklace"><a href="#C-necklace" class="headerlink" title="C.necklace"></a>C.necklace</h1><p>题目链接：<a href="https://codeforces.com/gym/103415/problem/C">Problem - C - Codeforces</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>一串项链有1~n个节点，n和1相连（形成环），其中m个节点是Bob喜欢的，现在给出这m个节点的位置，要求把项链分割成m段，使每段都至少有一个Bob喜欢的节点。求最大段长度最小是多少？</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>最大值最小我们可以通过二分来求，但如何通过check函数来二分是本题的难点，一般在check函数里都有用到贪心思想，因为只要最优情况满足条件那么当前的mid即为合法答案</p><p>可以想到mid是最大区间长度，而对于一个区间的长度len，在满足小于等于mid和右端点小于下一个Bob喜欢的节点的前提下，右端点要尽可能逼近  下一个特殊节点</p><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/b29718811da38afc.png"></p><p>所以确定了第一个区间的左端点，那么整个区间的划分情况都可以确定了，但是由于是环形，这样使得枚举左端点的时间复杂度很高，而且数据范围很大所以我们应该贪心的优化问题</p><h3 id="贪心优化"><a href="#贪心优化" class="headerlink" title="贪心优化"></a>贪心优化</h3><p>如果我们确定了左端点l，然后得到第一次贪心下的右端点，那么 r-l+1  是在不超过下一个特殊节点下取到的len,</p><p>而且这个len一定小于等于mid，但是这样是不是没有把利益最大化？因为我们明明可以取到mid，只要不超过mid就行，但是在限制下，len取小了，但是换一种思路，我们是不是可以把l前移，在不超过前一个特殊点的情况下前移（同时len也不超过mid），那么这样是不是利益最大化了，因为对于前一段来说，如果仅仅在第一个贪心的思想下，mid满足不了，那么就return false了，但实际上后一段可以为它多“吃”一段，那么可能就会满足条件了</p><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/9fbbb2a2299cd798.png"></p><h3 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h3><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/f5e6a1078fb785b8.png"></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">LL a[N];</span><br><span class="line">LL n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(LL mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL minv = <span class="number">1e18</span>;</span><br><span class="line">    LL p = a[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    LL detla = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">1</span>;i &lt;= m - <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p + mid &lt; a[i]) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//无法到达右端点</span></span><br><span class="line">        LL d = p + mid - a[i+<span class="number">1</span>] + <span class="number">1</span>;<span class="comment">//可以多利用的长度</span></span><br><span class="line">        <span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = a[i+<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(detla &lt;= minv)<span class="comment">//只有小于到前一个特殊点的距离才可以</span></span><br><span class="line">            &#123;</span><br><span class="line">                detla += <span class="built_in">min</span>(d,minv - detla);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p = p + mid;<span class="comment">//否则直接后移最大长度</span></span><br><span class="line">        minv = <span class="built_in">min</span>(minv,p-a[i]+detla);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p + mid + detla &gt;= n &amp;&amp; (p + mid + detla) % n &gt;= a[<span class="number">1</span>] - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    LL l = <span class="number">0</span>,r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        LL mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路及图片参考： @gxunWang</p>]]></content>
      
      
      <categories>
          
          <category> CCPC广州 </category>
          
          <category> 网络选拔赛训练赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
